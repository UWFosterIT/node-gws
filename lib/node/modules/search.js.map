{"version":3,"sources":["../../../src/modules/search.js"],"names":["cheerio","require","qs","Service","Search","constructor","config","query","opt","params","name","stem","member","owner","type","effective","scope","stringify","_get","then","result","$","load","xhtml","data","each","group","text","regid","title","push","module","exports"],"mappings":";;AAAA;AACA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,KAAUD,QAAQ,cAAR,CAAd;AACA,IAAIE,UAAUF,QAAQ,WAAR,CAAd;;AAEA,MAAMG,MAAN,SAAqBD,OAArB,CAA6B;AAC3BE,cAAYC,MAAZ,EAAoB;AAClB,UAAMA,MAAN;AACD;;AAEDC,QAAMC,GAAN,EAAW;AACT,QAAIC,SAAS;AACXC,YAAQF,IAAIE,IAAJ,IAAc,EADX;AAEXC,YAAQH,IAAIG,IAAJ,IAAc,EAFX;AAGXC,cAAQJ,IAAII,MAAJ,IAAc,EAHX;AAIXC,aAAQL,IAAIK,KAAJ,IAAc,EAJX;AAKXC,YAAQN,IAAIO,SAAJ,GAAgB,WAAhB,GAA8B,QAL3B;AAMXC,aAAQR,IAAIQ,KAAJ,KAAc,KAAd,GAAsB,KAAtB,GAA8B;AAN3B,KAAb;;AASA,QAAIT,QAAQL,GAAGe,SAAH,CAAaR,MAAb,CAAZ;;AAEA,WAAO,KAAKS,IAAL,CAAW,WAAUX,KAAM,EAA3B,EACJY,IADI,CACCC,UAAU;AACd,UAAIC,IAAIrB,QAAQsB,IAAR,CAAaF,OAAOG,KAApB,CAAR;;AAEA,UAAIC,OAAO,EAAX;;AAEAH,QAAE,iBAAF,EAAqBI,IAArB,CAA0B,YAAY;AACpC,YAAIC,QAAQ;AACVhB,gBAAOW,EAAE,OAAF,EAAW,IAAX,EAAiBM,IAAjB,EADG;AAEVC,iBAAOP,EAAE,QAAF,EAAY,IAAZ,EAAkBM,IAAlB,EAFG;AAGVE,iBAAOR,EAAE,QAAF,EAAY,IAAZ,EAAkBM,IAAlB;AAHG,SAAZ;AAKAH,aAAKM,IAAL,CAAUJ,KAAV;AACD,OAPD;;AASAN,aAAOI,IAAP,GAAcA,IAAd;AACA,aAAOJ,MAAP;AACD,KAjBI,CAAP;AAkBD;AAnC0B;;AAsC7BW,OAAOC,OAAP,GAAiB5B,MAAjB","file":"search.js","sourcesContent":["/* eslint-disable sort-keys */\nlet cheerio = require('cheerio');\nlet qs      = require('query-string');\nlet Service = require('./service');\n\nclass Search extends Service {\n  constructor(config) {\n    super(config);\n  }\n\n  query(opt) {\n    let params = {\n      name:   opt.name   || '',\n      stem:   opt.stem   || '',\n      member: opt.member || '',\n      owner:  opt.owner  || '',\n      type:   opt.effective ? 'effective' : 'direct',\n      scope:  opt.scope === 'all' ? 'all' : 'one'\n    };\n\n    let query = qs.stringify(params);\n\n    return this._get(`search/?${query}`)\n      .then(result => {\n        let $ = cheerio.load(result.xhtml);\n\n        let data = [];\n\n        $('.groupreference').each(function () {\n          let group = {\n            name:  $('.name', this).text(),\n            regid: $('.regid', this).text(),\n            title: $('.title', this).text()\n          };\n          data.push(group);\n        });\n\n        result.data = data;\n        return result;\n      });\n  }\n}\n\nmodule.exports = Search;\n"]}