{"version":3,"sources":["../../src/index.js"],"names":["opts","certReader","hasOwnProperty","Object","create","FileCertificate","file","S3Certificate","s3","Error","readCertificate","cert","key","existsSync","readFileSync","rejectUnauthorized","S3","getObject","Bucket","certBucket","Key","certKey","promise","catch","err","keyBucket","keyKey","Body","UWGWS","initialize","options","config","auth","certInfo","cache","cachePath","logLevel","cacheExt","configure","appenders","out","layout","type","categories","default","level","process","env","LOG_LEVEL","log","getLogger","group","membership","search","module","exports","on","reason","p","console","error","inspect","exit"],"mappings":"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","file":"index.js","sourcesContent":["import 'source-map-support/register';\nimport AWS        from 'aws-sdk';\nimport fs         from 'fs';\nimport Group      from './modules/group';\nimport log4js     from 'log4js';\nimport Membership from './modules/membership';\nimport MicroCache from 'micro-cache';\nimport Search     from './modules/search';\nimport util       from 'util';\n\nlet FileCertificate = {\n  readCertificate: async (opts) => {\n    if (opts.cert === '' || opts.key === '' ||\n      !fs.existsSync(opts.cert) || !fs.existsSync(opts.key)) {\n      throw new Error(`Client cert '${opts.cert}' or key '${opts.key}' can not be found`);\n    }\n\n    return {\n      cert:               fs.readFileSync(opts.cert),\n      key:                fs.readFileSync(opts.key),\n      rejectUnauthorized: false\n    };\n  }\n};\n\nlet S3Certificate = {\n  readCertificate: async (opts) => {\n    let s3 = new AWS.S3();\n    let cert = await s3.getObject({\n      Bucket: opts.certBucket,\n      Key:    opts.certKey\n    }).promise().catch((err) => {\n      throw Error('S3 get cert error', err);\n    });\n    let key = await s3.getObject({\n      Bucket: opts.keyBucket,\n      Key:    opts.keyKey\n    }).promise().catch((err) => {\n      throw Error('S3 get key error', err);\n    });\n\n    return {\n      cert:               cert.Body,\n      key:                key.Body,\n      rejectUnauthorized: false\n    };\n  }\n};\n\nasync function readCertificate(opts) {\n  let certReader;\n\n  switch (true) {\n\n    case opts.hasOwnProperty('file'):\n      certReader = Object.create(FileCertificate);\n      opts = opts.file;\n      break;\n\n    case opts.hasOwnProperty('s3'):\n      certReader = Object.create(S3Certificate);\n      opts = opts.s3;\n      break;\n\n    default:\n      throw Error('Certificate reader not supported');\n  }\n\n  return await certReader.readCertificate(opts);\n}\n\nlet UWGWS = {\n  async initialize(options) {\n    let config = options;\n    config.auth = await readCertificate(config.certInfo);\n    config.cache = new MicroCache(\n      options.cachePath,\n      options.logLevel,\n      options.cacheExt\n    );\n\n    log4js.configure({\n      appenders: {\n        out: {\n          layout: {type: 'colored'},\n          type:   'stdout',\n        }\n      },\n      categories: {\n        default: {\n          appenders: ['out'],\n          level:     process.env.LOG_LEVEL || config.logLevel || 'info'\n        }\n      }\n    });\n\n    config.log = log4js.getLogger();\n\n    this.group      = new Group(config);\n    this.membership = new Membership(config);\n    this.search     = new Search(config);\n\n    return this;\n  }\n};\n\nmodule.exports = UWGWS;\n\nprocess.on('unhandledRejection', (reason, p) => {\n  console.error(`Promise: ${util.inspect(p)}\\nReason: ${reason}`);\n  process.exit(1);\n});\n"]}